{
    "NGRX CRUD Action Types": {
        "prefix": "ngrx-crud-action-types",
        "body": [
            "import { Action } from '@ngrx/store';\r",
            "\r",
            "export enum ${1:Entity}ActionTypes {\r",
            "  Load = '[${1:Entity}] Load',\r",
            "  LoadSuccess = '[${1:Entity}] Load Success',\r",
            "  LoadError = '[${1:Entity}] Load Error',\r",
            "  LoadCancel = '[${1:Entity}] Load Cancel',\r",
            "\r",
            "  Create = '[${1:Entity}] Create',\r",
            "  CreateSuccess = '[${1:Entity}] Create Success',\r",
            "  CreateError = '[${1:Entity}] Create Error',\r",
            "\r",
            "  Update = '[${1:Entity}] Update',\r",
            "  UpdateSuccess = '[${1:Entity}] Update Success',\r",
            "  UpdateError = '[${1:Entity}] Update Error',\r",
            "\r",
            "  Delete = '[${1:Entity}] Delete',\r",
            "  DeleteSuccess = '[${1:Entity}] Delete Success',\r",
            "  DeleteSuccessLogical = '[${1:Entity}] Delete Success Logical',\r",
            "  DeleteSuccessPermanent = '[${1:Entity}] Delete Success Permanent',\r",
            "  DeleteError = '[${1:Entity}] Delete Error',\r",
            "\r",
            "  Undelete = '[${1:Entity}] Undelete',\r",
            "  UndeleteSuccess = '[${1:Entity}] Undelete Success',\r",
            "  UndeleteError = '[${1:Entity}] Undelete Error',\r",
            "\r",
            "  SetEditModel = '[${1:Entity}] Set Edit Model',\r",
            "  UnsetEditModel = '[${1:Entity}] Unset Edit Model',\r",
            "\r",
            "  SetCreateModel = '[${1:Entity}] Set Create Model',\r",
            "  UnsetCreateModel = '[${1:Entity}] Unset Create Model',\r",
            "\r",
            "  // List\r",
            "  ListLoad = '[${1:Entity} List] Load',\r",
            "  ListLoadSuccess = '[${1:Entity} List] Load Success',\r",
            "  ListLoadError = '[${1:Entity} List] Load Error',\r",
            "  ListLoadCancel = '[${1:Entity} List] Load Cancel',\r",
            "}\r",
            "$0"
        ],
        "description": "List of common ActionTypes of a CRUD Entity"
    },
    "NGRX CRUD Actions": {
        "prefix": "ngrx-crud-actions",
        "body": [
            "//CREATE\r",
            "export class ${1:Entity}Create implements Action {\r",
            "  readonly type = ${1:Entity}ActionTypes.Create;\r",
            "  payload: { ${2:parameterName}: ${3:I${1:Entity}Create} };\r",
            "  constructor(public ${2:${1:Entity}}: ${3:I${1:Entity}Create}) {\r",
            "    this.payload = { ${2:parameterName} };\r",
            "  }\r",
            "}\r",
            "export class ${1:Entity}CreateSuccess implements Action {\r",
            "  readonly type = ${1:Entity}ActionTypes.CreateSuccess;\r",
            "  payload: { ${2:parameterName}: ${6:I${1:Entity}Db} };\r",
            "  constructor(public ${2:parameterName}: ${6:I${1:Entity}Db}) {\r",
            "    this.payload = { ${2:parameterName} };\r",
            "  }\r",
            "}\r",
            "export class ${1:Entity}CreateError implements Action {\r",
            "  readonly type = ${1:Entity}ActionTypes.CreateError;\r",
            "  payload: { ${2:parameterName}: ${5:I${1:Entity}StoreEntity} };\r",
            "  constructor(public ${2:${1:Entity}}: ${5:I${1:Entity}StoreEntity}) {\r",
            "    this.payload = { ${2:parameterName} };\r",
            "  }\r",
            "}\r",
            "\r",
            "// UPDATE\r",
            "export class ${1:Entity}Update implements Action {\r",
            "  readonly type = ${1:Entity}ActionTypes.Update;\r",
            "  payload: { ${2:parameterName}: ${4:I${1:Entity}Edit} };\r",
            "  constructor(public ${2:parameterName}: ${4:I${1:Entity}Edit}) {\r",
            "    this.payload = { ${2:parameterName} };\r",
            "  }\r",
            "}\r",
            "export class ${1:Entity}UpdateSuccess implements Action {\r",
            "  readonly type = ${1:Entity}ActionTypes.UpdateSuccess;\r",
            "  payload: { ${2:parameterName}: ${6:I${1:Entity}Db} };\r",
            "  constructor(public ${2:parameterName}: ${6:I${1:Entity}Db}) {\r",
            "    this.payload = { ${2:parameterName} };\r",
            "  }\r",
            "}\r",
            "export class ${1:Entity}UpdateError implements Action {\r",
            "  readonly type = ${1:Entity}ActionTypes.UpdateError;\r",
            "  payload: { ${2:parameterName}: ${5:I${1:Entity}StoreEntity} };\r",
            "  constructor(public ${2:parameterName}: ${5:I${1:Entity}StoreEntity}) {\r",
            "    this.payload = { ${2:parameterName} };\r",
            "  }\r",
            "}\r",
            "\r",
            "// DELETE\r",
            "export class ${1:Entity}Delete implements Action {\r",
            "  readonly type = ${1:Entity}ActionTypes.Delete;\r",
            "  payload: { ${2:parameterName}: ${5:I${1:Entity}StoreEntity} };\r",
            "  constructor(public ${2:parameterName}: ${5:I${1:Entity}StoreEntity}) {\r",
            "    this.payload = { ${2:parameterName} };\r",
            "  }\r",
            "}\r",
            "export class ${1:Entity}DeleteSuccess implements Action {\r",
            "  readonly type = ${1:Entity}ActionTypes.DeleteSuccess;\r",
            "  payload: { ${2:parameterName}: ${5:I${1:Entity}Db} };\r",
            "  constructor(public ${2:parameterName}: ${5:I${1:Entity}Db}) {\r",
            "    this.payload = { ${2:parameterName} };\r",
            "  }\r",
            "}\r",
            "export class ${1:Entity}DeleteSuccessLogical implements Action {\r",
            "  readonly type = ${1:Entity}ActionTypes.DeleteSuccessLogical;\r",
            "  payload: { ${2:parameterName}: ${5:I${1:Entity}Db} };\r",
            "  constructor(public ${2:parameterName}: ${5:I${1:Entity}Db}) {\r",
            "    this.payload = { ${2:parameterName} };\r",
            "  }\r",
            "}\r",
            "export class ${1:Entity}DeleteSuccessPermanent implements Action {\r",
            "  readonly type = ${1:Entity}ActionTypes.DeleteSuccessPermanent;\r",
            "  payload: { ${2:parameterName}: ${5:I${1:Entity}StoreEntity} };\r",
            "  constructor(public ${2:parameterName}: ${5:I${1:Entity}StoreEntity}) {\r",
            "    this.payload = { ${2:parameterName} };\r",
            "  }\r",
            "}\r",
            "export class ${1:Entity}DeleteError implements Action {\r",
            "  readonly type = ${1:Entity}ActionTypes.DeleteError;\r",
            "  payload: { ${2:parameterName}: ${5:I${1:Entity}StoreEntity} };\r",
            "  constructor(public ${2:parameterName}: ${5:I${1:Entity}StoreEntity}) {\r",
            "    this.payload = { ${2:parameterName} };\r",
            "  }\r",
            "}\r",
            "\r",
            "// UNDELETE\r",
            "export class ${1:Entity}Undelete implements Action {\r",
            "  readonly type = ${1:Entity}ActionTypes.Undelete;\r",
            "  payload: { ${2:parameterName}: I${1:Entity}Edit };\r",
            "  constructor(public ${2:parameterName}: I${1:Entity}Edit) {\r",
            "    this.payload = { ${2:parameterName} };\r",
            "  }\r",
            "}\r",
            "export class ${1:Entity}UndeleteSuccess implements Action {\r",
            "  readonly type = ${1:Entity}ActionTypes.UndeleteSuccess;\r",
            "  payload: { ${2:parameterName}: ${5:I${1:Entity}Db} };\r",
            "  constructor(public ${2:parameterName}: ${5:I${1:Entity}Db}) {\r",
            "    this.payload = { ${2:parameterName} };\r",
            "  }\r",
            "}\r",
            "export class ${1:Entity}UndeleteError implements Action {\r",
            "  readonly type = ${1:Entity}ActionTypes.UndeleteError;\r",
            "  constructor() {}\r",
            "}",
            "\r",
            "// LOAD\r",
            "export class ${1:Entity}Load implements Action {\r",
            "  readonly type = ${1:Entity}ActionTypes.Load;\r",
            "  payload: { ${2:parameterName}Id: number };\r",
            "  constructor(public ${2:parameterName}Id: number) {\r",
            "    this.payload = { ${2:parameterName}Id };\r",
            "  }\r",
            "}\r",
            "export class ${1:Entity}LoadSuccess implements Action {\r",
            "  readonly type = ${1:Entity}ActionTypes.LoadSuccess;\r",
            "  payload: { ${2:parameterName}: ${6:I${1:Entity}Db} };\r",
            "  constructor(public ${2:parameterName}: ${6:I${1:Entity}Db}) {\r",
            "    this.payload = { ${2:parameterName} };\r",
            "  }\r",
            "}\r",
            "export class ${1:Entity}LoadError implements Action {\r",
            "  readonly type = ${1:Entity}ActionTypes.LoadError;\r",
            "  payload: { ${2:parameterName}: ${6:I${1:Entity}Db} };\r",
            "  constructor() {\r",
            "    this.payload = { ${2:parameterName}: undefined };\r",
            "  }\r",
            "}\r",
            "export class ${1:Entity}LoadCancel implements Action {\r",
            "  readonly type = ${1:Entity}ActionTypes.LoadCancel;\r",
            "  payload: { ${2:parameterName}: ${6:I${1:Entity}Db} };\r",
            "  constructor() {\r",
            "    this.payload = { ${2:parameterName}: undefined };\r",
            "  }\r",
            "}\r",
            "\r",
            "// LIST LOAD\r",
            "export class ${1:Entity}ListLoad implements Action {\r",
            "  readonly type = ${1:Entity}ActionTypes.ListLoad;\r",
            "  constructor() { }\r",
            "}\r",
            "export class ${1:Entity}ListLoadSuccess implements Action {\r",
            "  readonly type = ${1:Entity}ActionTypes.ListLoadSuccess;\r",
            "  payload: { list: Array<I${1:Entity}SelectListItem> };\r",
            "  constructor(public list: Array<I${1:Entity}SelectListItem>) {\r",
            "    this.payload = { list };\r",
            "  }\r",
            "}\r",
            "export class ${1:Entity}ListLoadError implements Action {\r",
            "  readonly type = ${1:Entity}ActionTypes.ListLoadError;\r",
            "  payload: { list: Array<I${1:Entity}SelectListItem> };\r",
            "  constructor() {\r",
            "    this.payload = { list: [] };\r",
            "  }\r",
            "}\r",
            "export class ${1:Entity}ListLoadCancel implements Action {\r",
            "  readonly type = ${1:Entity}ActionTypes.ListLoadCancel;\r",
            "  payload: { list: Array<I${1:Entity}SelectListItem> };\r",
            "  constructor() {\r",
            "    this.payload = { list: [] };\r",
            "  }\r",
            "}\r",
            "// EDIT MODEL\r",
            "export class ${1:Entity}SetEditModel implements Action {\r",
            "  readonly type = ${1:Entity}ActionTypes.SetEditModel;\r",
            "  payload: { editModel: I${1:Entity}Edit };\r",
            "  constructor(public editModel: I${1:Entity}Edit) {\r",
            "    this.payload = { editModel };\r",
            "  }\r",
            "}\r",
            "export class ${1:Entity}UnsetEditModel implements Action {\r",
            "  readonly type = ${1:Entity}ActionTypes.UnsetEditModel;\r",
            "  payload: { editModel: I${1:Entity}Edit };\r",
            "  constructor() {\r",
            "    this.payload = { editModel: undefined };\r",
            "  }\r",
            "}\r",
            "\r",
            "// CREATE MODEL\r",
            "export class ${1:Entity}SetCreateModel implements Action {\r",
            "  readonly type = ${1:Entity}ActionTypes.SetCreateModel;\r",
            "  payload: { createModel: I${1:Entity}Create };\r",
            "  constructor(public createModel: I${1:Entity}Create) {\r",
            "    this.payload = { createModel };\r",
            "  }\r",
            "}\r",
            "export class ${1:Entity}UnsetCreateModel implements Action {\r",
            "  readonly type = ${1:Entity}ActionTypes.UnsetCreateModel;\r",
            "  payload: { createModel: I${1:Entity}Create };\r",
            "  constructor() {\r",
            "    this.payload = { createModel: undefined };\r",
            "  }\r",
            "}",
            "\r",
            "export type ${1:Entity}Actions =\r",
            "  | ${1:Entity}Create\r",
            "  | ${1:Entity}CreateSuccess\r",
            "  | ${1:Entity}CreateError\r",
            "  | ${1:Entity}Update\r",
            "  | ${1:Entity}UpdateSuccess\r",
            "  | ${1:Entity}UpdateError\r",
            "  | ${1:Entity}Delete\r",
            "  | ${1:Entity}DeleteSuccess\r",
            "  | ${1:Entity}DeleteSuccessLogical\r",
            "  | ${1:Entity}DeleteSuccessPermanent\r",
            "  | ${1:Entity}DeleteError\r",
            "  | ${1:Entity}Undelete\r",
            "  | ${1:Entity}UndeleteSuccess\r",
            "  | ${1:Entity}UndeleteError\r",
            "  | ${1:Entity}Load\r",
            "  | ${1:Entity}LoadSuccess\r",
            "  | ${1:Entity}LoadError\r",
            "  | ${1:Entity}LoadCancel\r",
            "  | ${1:Entity}ListLoad\r",
            "  | ${1:Entity}ListLoadSuccess\r",
            "  | ${1:Entity}ListLoadError\r",
            "  | ${1:Entity}ListLoadCancel\r",
            "  | ${1:Entity}SetEditModel\r",
            "  | ${1:Entity}UnsetEditModel\r",
            "  | ${1:Entity}SetCreateModel\r",
            "  | ${1:Entity}UnsetCreateModel;\r",
            "  \r",
            "$0"
        ],
        "description": "List of common Actions of a CRUD Entity"
    },
    "NGRX CRUD Selectors": {
        "prefix": "ngrx-crud-selectors",
        "body": [
            "import { createSelector } from '@ngrx/store';\r",
            "import { AppState } from '../state';\r",
            "import * as fromObjectUtils from '../utils/object.utils';\r",
            "\r",
            "export const select${1:Entity}State = (state: AppState): I${1:Entity}State =>\r",
            "  state.${2:entityState};\r",
            "\r",
            "// Entities\r",
            "export const ${3:entity}Entities = createSelector(\r",
            "  select${1:Entity}State,\r",
            "  state => state.entities\r",
            ");\r",
            "\r",
            "// List in array\r",
            "export const ${3:entity}List = createSelector(\r",
            "  ${3:entity}Entities,\r",
            "  entities => fromObjectUtils.toArray(entities)\r",
            ");\r",
            "\r",
            "// Fetch\r",
            "export const ${3:entity}IsFetching = createSelector(\r",
            "  select${1:Entity}State,\r",
            "  state => state.isFetching\r",
            ");\r",
            "\r",
            "// Create\r",
            "export const ${3:entity}CreateModel = createSelector(\r",
            "  select${1:Entity}State,\r",
            "  state => state.createModel\r",
            ");\r",
            "\r",
            "// Edit\r",
            "export const ${3:entity}EditModel = createSelector(\r",
            "  select${1:Entity}State,\r",
            "  state => state.editModel\r",
            ");\r",
            "\r",
            "// GetById\r",
            "export const ${3:entity}ById = (${3:entity}Id: number) =>\r",
            "  createSelector(\r",
            "    ${3:entity}Entities,\r",
            "    entities => entities[${3:entity}Id]\r",
            ");\r",
            "\r",
            "$0"
        ],
        "description": "List of common selectors of a CRUD Entity"
    },
    "NGRX CRUD Reducers": {
        "prefix": "ngrx-crud-reducers",
        "body": [
            "import { adapter } from './${2:entity}.adapter';\r",
            "import { I${1:Entity}State } from './${2:entity}.state';\r",
            "import { ${1:Entity}Actions, ${1:Entity}ActionTypes } from './${2:entity}.actions';\r",
            "import * as fromObjectUtils from '../utils/object.utils';\r",
            "\r",
            "const initial${1:Entity}State: I${1:Entity}State = {\r",
            "  entities: {},\r",
            "  ids: [],\r",
            "  isFetching: false,\r",
            "  createModel: undefined,\r",
            "  editModel: undefined\r",
            "};\r",
            "\r",
            "export function ${3:entity}Reducer(\r",
            "  state: I${1:Entity}State = initial${1:Entity}State,\r",
            "  action: ${1:Entity}Actions\r",
            "): I${1:Entity}State {\r",
            "  switch (action.type) {\r",
            "    // CREATE\r",
            "    case ${1:Entity}ActionTypes.Create:\r",
            "      const createModel = { ...action.payload.${4:entityParam} };\r",
            "      return {\r",
            "        ...state,\r",
            "        createModel: { ...createModel, isLoading: true }\r",
            "      };\r",
            "    // CREATE SUCCESS\r",
            "    case ${1:Entity}ActionTypes.CreateSuccess:\r",
            "      const createdModel = { ...action.payload.${4:entityParam} };\r",
            "      return adapter.addOne(createdModel, {\r",
            "        ...state,\r",
            "        createModel: { isLoading: false, isDone: true }\r",
            "      });\r",
            "    // CREATE ERROR\r",
            "    case ${1:Entity}ActionTypes.CreateError:\r",
            "      return {\r",
            "        ...state,\r",
            "        createModel: { ...state.createModel, isLoading: false, hasError: true }\r",
            "      };\r",
            "    // UPDATE\r",
            "    case ${1:Entity}ActionTypes.Update:\r",
            "      const editModel = { ...action.payload.${4:entityParam} };\r",
            "      return {\r",
            "        ...state,\r",
            "        editModel: { ...editModel, isLoading: true }\r",
            "      };\r",
            "\r",
            "    // UPDATE SUCCESS\r",
            "    case ${1:Entity}ActionTypes.UpdateSuccess:\r",
            "    case ${1:Entity}ActionTypes.DeleteSuccessLogical:\r",
            "      const editedModel = { ...action.payload.${4:entityParam} };\r",
            "      return adapter.upsertOne(\r",
            "        editedModel,\r",
            "        {\r",
            "          ...state,\r",
            "          editModel: { ...editedModel, isLoading: false, isDone: true }\r",
            "        }\r",
            "      );\r",
            "    // UPDATE ERROR\r",
            "    case ${1:Entity}ActionTypes.UpdateError:\r",
            "      return {\r",
            "        ...state,\r",
            "        editModel: { ...state.editModel, isLoading: false, hasError: true }\r",
            "      };\r",
            "    // DELETE\r",
            "    case ${1:Entity}ActionTypes.Delete:\r",
            "      const deleteModel = {...action.payload.${4:entityParam} };",
            "      return {\r",
            "        ...state,\r",
            "        editModel: { ...deleteModel, isLoading: true }\r",
            "      };\r",
            "    // DELETE SUCCESS\r",
            "    case ${1:Entity}ActionTypes.DeleteSuccess:\r",
            "    case ${1:Entity}ActionTypes.DeleteSuccessPermanent:\r",
            "      const deletedModel = { ...action.payload.${4:entityParam} };\r",
            "      return adapter.removeOne(deletedModel.id, {\r",
            "        ...state,\r",
            "        editModel: { ...deletedModel, isLoading: false, isDone: true }\r",
            "      });\r",
            "    // DELETE ERROR\r",
            "    case ${1:Entity}ActionTypes.DeleteError:\r",
            "      return {\r",
            "        ...state,\r",
            "        editModel: { ...state.editModel, isLoading: false, hasError: true }\r",
            "      };\r",
            "    // LOAD\r",
            "    case ${1:Entity}ActionTypes.Load:\r",
            "      return {\r",
            "        ...state,\r",
            "        isFetching: true,\r",
            "        createModel: undefined,\r",
            "        editModel: { isLoading: true }\r",
            "      };\r",
            "    // LOAD SUCCESS\r",
            "    case ${1:Entity}ActionTypes.LoadSuccess:\r",
            "      const loadedModel = { ...action.payload.${4:entityParam} };\r",
            "      return adapter.upsertOne(loadedModel, {\r",
            "        ...state,\r",
            "        isFetching: false,\r",
            "        editModel: { ...loadedModel, isLoading: false }\r",
            "      });\r",
            "    // LOAD CANCEL\r",
            "    case ${1:Entity}ActionTypes.LoadCancel:\r",
            "      return {\r",
            "        ...state,\r",
            "        isFetching: false,\r",
            "        editModel: undefined,\r",
            "        createModel: undefined\r",
            "      };\r",
            "    // LOAD ERROR\r",
            "    case ${1:Entity}ActionTypes.LoadError:\r",
            "      return {\r",
            "        ...state,\r",
            "        isFetching: false,\r",
            "        editModel: { ...editModel, isLoading: false }\r",
            "      };\r",
            "\r",
            "    // LIST LOAD\r",
            "    case ${1:Entity}ActionTypes.ListLoad:\r",
            "      return {\r",
            "        ...state,\r",
            "        isFetching: true\r",
            "      };\r",
            "    // LIST LOAD SUCCESS / ERROR\r",
            "    case ${1:Entity}ActionTypes.ListLoadSuccess:\r",
            "    case ${1:Entity}ActionTypes.ListLoadError:\r",
            "      const { list } = action.payload;\r",
            "      return adapter.upsertMany(list, {\r",
            "        ...state,\r",
            "        isFetching: false,\r",
            "        createModel: undefined,\r",
            "        editModel: undefined\r",
            "      });\r",
            "    // LIST LOAD CANCEL\r",
            "    case ${1:Entity}ActionTypes.ListLoadCancel:\r",
            "      return {\r",
            "        ...state,\r",
            "        isFetching: false\r",
            "      };\r",
            "    // EDIT MODEL\r",
            "    case ${1:Entity}ActionTypes.SetEditModel:\r",
            "      const editingModel = action.payload.editModel;\r",
            "      return {\r",
            "        ...state,\r",
            "        editModel: { ...editingModel }\r",
            "      };\r",
            "    case ${1:Entity}ActionTypes.UnsetEditModel:\r",
            "      return { ...state, editModel: undefined };\r",
            "    // CREATE MODEL\r",
            "    case ${1:Entity}ActionTypes.SetCreateModel:\r",
            "      const creatingModel = action.payload.createModel;\r",
            "      return {\r",
            "        ...state,\r",
            "        createModel: { ...creatingModel }\r",
            "      };\r",
            "    case ${1:Entity}ActionTypes.UnsetCreateModel:\r",
            "      return { ...state, createModel: undefined };",
            "\r",
            "    default:\r",
            "      return state;\r",
            "  }\r",
            "}\r",
            ""
        ],
        "description": "List of common reducers of a CRUD Entity"
    },
    "NGRX CRUD Effects": {
        "prefix": "ngrx-crud-effects",
        "body": [
            "import { Injectable } from \"@angular/core\";\r",
            "import { Effect, Actions, ofType } from \"@ngrx/effects\";\r",
            "\r",
            "import { map, catchError, switchMap, mergeMap } from \"rxjs/operators\";\r",
            "import { of } from \"rxjs\";\r",
            "\r",
            "import { ${1:Entity}Service } from \"../../services/${2:entity}.service\";\r",
            "import { ErrorOccurred } from \"../error/error.actions\";\r",
            "import {\r",
            "    ${1:Entity}ActionTypes,\r",
            "    ${1:Entity}Create,\r",
            "    ${1:Entity}CreateSuccess,\r",
            "    ${1:Entity}CreateError,\r",
            "    ${1:Entity}Load,\r",
            "    ${1:Entity}LoadCancel,\r",
            "    ${1:Entity}LoadSuccess,\r",
            "    ${1:Entity}LoadError,\r",
            "    ${1:Entity}Update,\r",
            "    ${1:Entity}UpdateSuccess,\r",
            "    ${1:Entity}UpdateError,\r",
            "    ${1:Entity}Delete,\r",
            "    ${1:Entity}DeleteSuccess,\r",
            "    ${1:Entity}DeleteError,\r",
            "    ${1:Entity}ListLoadSuccess,\r",
            "    ${1:Entity}ListLoadCancel,\r",
            "    ${1:Entity}ListLoad,\r",
            "    ${1:Entity}ListLoadError\r",
            "} from \"./${2:entity}.actions\";\r",
            "\r",
            "import { TranslateService } from \"src/app/modules/core/modules/translate/translate.service\";\r",
            "import { ToastService } from \"src/app/modules/core/modules/toast/toast.service\";\r",
            "\r",
            "@Injectable()\r",
            "export class ${1:Entity}Effects {\r",
            "    constructor(\r",
            "        private actions$: Actions,\r",
            "        private toastService: ToastService,\r",
            "        private translateService: TranslateService,\r",
            "        private ${3:entity}Service: ${1:Entity}Service\r",
            "    ) { }\r",
            "\r",
            "    // LOAD / LOAD CANCEL\r",
            "    @Effect()\r",
            "    ${3:entity}LoadOrCancel$ = this.actions$.pipe(\r",
            "        ofType<${1:Entity}Load | ${1:Entity}LoadCancel>(\r",
            "            ${1:Entity}ActionTypes.Load,\r",
            "            ${1:Entity}ActionTypes.LoadCancel\r",
            "        ),\r",
            "        switchMap(action => {\r",
            "            return action.type === ${1:Entity}ActionTypes.LoadCancel\r",
            "                ? of()\r",
            "                : this.${3:entity}Service\r",
            "                    .getById(action.payload.${3:entity}Id)\r",
            "                    .pipe(\r",
            "                        map(${4:entityParam} => \r",
            "                            new ${1:Entity}LoadSuccess(${4:entityParam})\r",
            "                        ),\r",
            "                        catchError(err =>\r",
            "                            of(\r",
            "                                new ErrorOccurred({\r",
            "                                    fromAction: action,\r",
            "                                    errorData: err,\r",
            "                                    nextAction: new ${1:Entity}LoadError()\r",
            "                                })\r",
            "                            )\r",
            "                        )\r",
            "                    );\r",
            "        })\r",
            "    );\r",
            "\r",
            "    // CREATE\r",
            "    @Effect()\r",
            "    ${3:entity}Create$ = this.actions$.pipe(\r",
            "        ofType<${1:Entity}Create>(${1:Entity}ActionTypes.Create),\r",
            "        switchMap(action =>\r",
            "            this.${3:entity}Service.create(action.payload.${4:entityParam}).pipe(\r",
            "                map(${4:entityParam} => {\r",
            "                    this.toastService.success(\r",
            "                        `ID:${${4:entityParam}.id}`,\r",
            "                        this.translateService.translate(\r",
            "                            \"TODO: Entità creata correttamente\",\r",
            "                            \"client_response.${5:entity_translate_key}_created\"\r",
            "                        )\r",
            "                    );\r",
            "                    return new ${1:Entity}CreateSuccess(${4:entityParam});\r",
            "                }),\r",
            "                catchError(err =>\r",
            "                    of(\r",
            "                        new ErrorOccurred({\r",
            "                            fromAction: action,\r",
            "                            errorData: err,\r",
            "                            nextAction: new ${1:Entity}CreateError(action.payload.${4:entityParam})\r",
            "                        })\r",
            "                    )\r",
            "                )\r",
            "            )\r",
            "        )\r",
            "    );\r",
            "\r",
            "    // UPDATE\r",
            "    @Effect()\r",
            "    ${3:entity}Update$ = this.actions$.pipe(\r",
            "        ofType<${1:Entity}Update>(${1:Entity}ActionTypes.Update),\r",
            "        switchMap(action => {\r",
            "            return this.${3:entity}Service.update(action.payload.${4:entityParam}).pipe(\r",
            "                map(${4:entityParam} => {\r",
            "                    this.toastService.success(\r",
            "                        `ID:${${4:entityParam}.id}`,\r",
            "                        this.translateService.translate(\r",
            "                            \"TODO: Entità modificata correttamente\",\r",
            "                            \"client_response.${5:entity_translate_key}_updated\"\r",
            "                        )\r",
            "                    );\r",
            "                    return new ${1:Entity}UpdateSuccess(${4:entityParam});\r",
            "                }),\r",
            "                catchError(err =>\r",
            "                    of(\r",
            "                        new ErrorOccurred({\r",
            "                            fromAction: action,\r",
            "                            errorData: err,\r",
            "                            nextAction: new ${1:Entity}UpdateError(action.payload.${4:entityParam})\r",
            "                        })\r",
            "                    )\r",
            "                )\r",
            "            );\r",
            "        })\r",
            "    );\r",
            "\r",
            "    // DELETE\r",
            "    @Effect()\r",
            "    ${3:entity}Delete$ = this.actions$.pipe(\r",
            "        ofType<${1:Entity}Delete>(${1:Entity}ActionTypes.Delete),\r",
            "        switchMap(action =>\r",
            "            this.${3:entity}Service.delete(action.payload.${4:entityParam}.id).pipe(\r",
            "                map(${4:entityParam} => new ${1:Entity}DeleteSuccess(${4:entityParam})),\r",
            "                catchError(err =>\r",
            "                    of(\r",
            "                        new ErrorOccurred({\r",
            "                            fromAction: action,\r",
            "                            errorData: err,\r",
            "                            nextAction: new ${1:Entity}DeleteError(action.payload.${4:entityParam})\r",
            "                        })\r",
            "                    )\r",
            "                )\r",
            "            )\r",
            "        )\r",
            "    );\r",
            "\r",
            "    // LIST LOAD / LIST LOAD CANCEL\r",
            "    @Effect()\r",
            "    ${3:entity}ListLoadOrCancel$ = this.actions$.pipe(\r",
            "        ofType<${1:Entity}ListLoad | ${1:Entity}ListLoadCancel>(\r",
            "            ${1:Entity}ActionTypes.ListLoad,\r",
            "            ${1:Entity}ActionTypes.ListLoadCancel\r",
            "        ),\r",
            "        switchMap(action =>\r",
            "            action.type === ${1:Entity}ActionTypes.ListLoadCancel\r",
            "                ? of()\r",
            "                : this.${3:entity}Service.getSelectList().pipe(\r",
            "                    map(list => new ${1:Entity}ListLoadSuccess(list)),\r",
            "                    catchError(err =>\r",
            "                        of(\r",
            "                            new ErrorOccurred({\r",
            "                                fromAction: action,\r",
            "                                errorData: err,\r",
            "                                nextAction: new ${1:Entity}ListLoadError()\r",
            "                            })\r",
            "                        )\r",
            "                    )\r",
            "                )\r",
            "        )\r",
            "    );\r",
            "}\r",
            ""
        ],
        "description": "List of common effects of a CRUD Entity"
    },
    "NGRX CRUD Service": {
        "prefix": "ngrx-crud-services",
        "body": [
            "import { Injectable } from '@angular/core';\r",
            "import { HttpClient } from '@angular/common/http';\r",
            "\r",
            "import { ConfigService } from 'src/app/modules/core/config/config.service';\r",
            "import { I${1:Entity}Db } from '../shared/models/db/${2:entity}.db.models';\r",
            "import { I${1:Entity}SelectListItem } from '../shared/models/db/${2:entity}.db.models';\r",
            "\r",
            "@Injectable()\r",
            "export class ${1:Entity}Service {\r",
            "  public static apiBaseUrl = '/${3:entity-url}';\r",
            "  public static apiUrl: string =\r",
            "    ConfigService.API_BASE_URL + ${1:Entity}Service.apiBaseUrl;\r",
            "\r",
            "  constructor(private http: HttpClient, private config: ConfigService) {}\r",
            "\r",
            "  // ENTITY\r",
            "  create(${4:entityParam}) {\r",
            "    return this.http.post<I${1:Entity}Db>(\r",
            "      ${1:Entity}Service.apiUrl,\r",
            "      ${4:entityParam}\r",
            "    );\r",
            "  }\r",
            "\r",
            "  update(${4:entityParam}) {\r",
            "    return this.http.put<I${1:Entity}Db>(\r",
            "      ${1:Entity}Service.apiUrl,\r",
            "      ${4:entityParam}\r",
            "    );\r",
            "  }\r",
            "\r",
            "  delete(${4:entityParam}Id) {\r",
            "    return this.http.delete<I${1:Entity}Db>(\r",
            "      `${${1:Entity}Service.apiUrl}/${${4:entityParam}Id}`\r",
            "    );\r",
            "  }\r",
            "\r",
            "  undelete(${4:entityParam}Id) {\r",
            "    return this.http.put<I${1:Entity}Db>(\r",
            "      `${${1:Entity}Service.apiUrl}/${${4:entityParam}Id}/undelete`,null\r",
            "    );\r",
            "  }\r",
            "\r",
            "  getById(${4:entityParam}Id: number) {\r",
            "    return this.http.get<I${1:Entity}Db>(\r",
            "      `${${1:Entity}Service.apiUrl}/${${4:entityParam}Id}`\r",
            "    );\r",
            "  }\r",
            "\r",
            "  // LIST\r",
            "  getAll() {\r",
            "    return this.http.post<Array<I${1:Entity}Db>>(\r",
            "      `${${1:Entity}Service.apiUrl}/filter`,\r",
            "      null\r",
            "    );\r",
            "  }\r",
            "\r",
            "  // SELECT LIST\r",
            "  getSelectList() {\r",
            "    return this.http.get<Array<I${1:Entity}SelectListItem>>(\r",
            "      ${1:Entity}Service.apiUrl\r",
            "    );\r",
            "  }\r",
            "}\r",
            ""
        ],
        "description": "List of common service of a CRUD Entity"
    },
    "NGRX CRUD Facade": {
        "prefix": "ngrx-crud-facade",
        "body": [
            "import { Injectable } from \"@angular/core\";\r",
            "\r",
            "import { Observable, of } from \"rxjs\";\r",
            "\r",
            "import { Store } from \"@ngrx/store\";\r",
            "\r",
            "import { AppState } from \"../store/state\";\r",
            "import { I${1:Entity}Edit } from \"src/app/components/${3:entity}/edit/${3:entity}-edit.models\";\r",
            "import {\r",
            "  ${2:entity}CreateModel,\r",
            "  ${2:entity}CreateModelIsLoading,\r",
            "  ${2:entity}List,\r",
            "  ${2:entity}IsFetching,\r",
            "  ${2:entity}ById,\r",
            "  ${2:entity}EditModel,\r",
            "  ${2:entity}EditModelIsLoading\r",
            "} from \"../store/${3:entity}/${3:entity}.selectors\";\r",
            "import {\r",
            "  ${1:Entity}Create,\r",
            "  ${1:Entity}Update,\r",
            "  ${1:Entity}LoadCancel,\r",
            "  ${1:Entity}Load,\r",
            "  ${1:Entity}Delete,\r",
            "  ${1:Entity}ListLoad,\r",
            "  ${1:Entity}ListLoadCancel\r",
            "} from \"../store/${3:entity}/${3:entity}.actions\";\r",
            "import { I${1:Entity}Create } from \"../components/${3:entity}/create/${3:entity}-create.models\";\r",
            "import { I${1:Entity}Detail } from \"../components/${3:entity}/detail/${3:entity}-detail.models\";\r",
            "\r",
            "@Injectable()\r",
            "export class ${1:Entity}Facade {\r",
            "  // Fetch\r",
            "  isFetching$: Observable<boolean> = this.store.select(\r",
            "    ${2:entity}IsFetching\r",
            "  );\r",
            "\r",
            "  // Create\r",
            "  createModel$: Observable<Partial<I${1:Entity}Create>> = this.store.select(\r",
            "    ${2:entity}CreateModel\r",
            "  );\r",
            "\r",
            "  // Update\r",
            "  editModel$: Observable<Partial<I${1:Entity}Edit>> = this.store.select(\r",
            "    ${2:entity}EditModel\r",
            "  );\r",
            "\r",
            "  // List\r",
            "  list$: Observable<Array<I${1:Entity}SelectListItem>> = this.store.select(\r",
            "    ${2:entity}List\r",
            "  );\r",
            "\r",
            "  constructor(private store: Store<AppState>) {}\r",
            "\r",
            "  // List\r",
            "  loadAll() {\r",
            "    this.store.dispatch(new ${1:Entity}ListLoad());\r",
            "  }\r",
            "  cancelLoadAll() {\r",
            "    this.store.dispatch(new ${1:Entity}ListLoadCancel());\r",
            "  }\r",
            "\r",
            "  // Create\r",
            "  create(${4:entityParam}: I${1:Entity}Create) {\r",
            "    this.store.dispatch(new ${1:Entity}Create(${4:entityParam}));\r",
            "  }\r",
            "  // Update\r",
            "  update(${4:entityParam}: I${1:Entity}Edit) {\r",
            "    this.store.dispatch(new ${1:Entity}Update(${4:entityParam}));\r",
            "  }\r",
            "  // Delete\r",
            "  delete(${4:entityParam}: I${1:Entity}StoreEntity) {\r",
            "    this.store.dispatch(new ${1:Entity}Delete(${4:entityParam}));\r",
            "  }\r",
            "  // Undelete\r",
            "  undelete(${4:entityParam}: I${1:Entity}StoreEntity) {\r",
            "    this.store.dispatch(new ${1:Entity}Undelete(${4:entityParam}));\r",
            "  }\r",
            "\r",
            "  // Create Model\r",
            "  setEditModel(${2:entity}: I${1:Entity}Edit) {\r",
            "    this.store.dispatch(new ${1:Entity}SetEditModel(${2:entity}));\r",
            "  }\r",
            "  unsetEditModel() {\r",
            "    this.store.dispatch(new ${1:Entity}UnsetEditModel());\r",
            "  }\r",
            "  // Edit Model\r",
            "  setCreateModel(${2:entity}: I${1:Entity}Create) {\r",
            "    this.store.dispatch(new ${1:Entity}SetCreateModel(${2:entity}));;\r",
            "  }\r",
            "  unsetCreateModel() {\r",
            "    this.store.dispatch(new ${1:Entity}UnsetCreateModel());\r",
            "  }\r",
            "\r",
            "  // Get By Id\r",
            "  loadById(${4:entityParam}Id: number) {\r",
            "    this.store.dispatch(new ${1:Entity}Load(${4:entityParam}Id));\r",
            "  }\r",
            "  cancelLoadById() {\r",
            "    this.store.dispatch(new ${1:Entity}LoadCancel());\r",
            "  }\r",
            "  getById(${4:entityParam}Id: number) {\r",
            "    return this.store.select(${2:entity}ById(${4:entityParam}Id));\r",
            "  }\r",
            "}\r",
            ""
        ],
        "description": "Common facade of a CRUD Entity"
    }
}