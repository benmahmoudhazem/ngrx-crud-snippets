{
    "NGRX Common Action Types": {
        "prefix": "ngrx-crud-action-types",
        "body": [
            "export enum ${1:Entity}ActionTypes {",
            "\tLoad = '[${1:Entity}] Load',",
            "\tLoadSuccess = '[${1:Entity}] Load Success',",
            "\tLoadError = '[${1:Entity}] Load Error',",
            "\tLoadCancel = '[${1:Entity}] Load Cancel',",
            "",
            "\tCreate = '[${1:Entity}] Create',",
            "\tCreateSuccess = '[${1:Entity}] Create Success',",
            "\tCreateError = '[${1:Entity}] Create Error',",
            "",
            "\tUpdate = '[${1:Entity}] Update',",
            "\tUpdateSuccess = '[${1:Entity}] Update Success',",
            "\tUpdateError = '[${1:Entity}] Update Error',",
            "",
            "\tDelete = '[${1:Entity}] Delete',",
            "\tDeleteSuccess = '[${1:Entity}] Delete Success',",
            "\tDeleteError = '[${1:Entity}] Delete Error',",
            "",
            "\t// List",
            "\tListLoad = '[${1:Entity} List] Load',",
            "\tListLoadSuccess = '[${1:Entity} List] Load Success',",
            "\tListLoadError = '[${1:Entity} List] Load Error',",
            "\tListLoadCancel = '[${1:Entity} List] Load Cancel',",
            "}",
            "$0"
        ],
        "description": "List of common ActionTypes of a CRUD Entity"
    },
    "NGRX Common Actions": {
        "prefix": "ngrx-crud-actions",
        "body": [
            "//CREATE\r",
            "export class ${1:Entity}Create implements Action {\r",
            "  readonly type = ${1:Entity}ActionTypes.Create;\r",
            "  payload: { ${2:parameterName}: ${3:I${1:Entity}Create} };\r",
            "  constructor(public ${2:${1:Entity}}: ${3:I${1:Entity}Create}) {\r",
            "    this.payload = { ${2:parameterName} };\r",
            "  }\r",
            "}\r",
            "export class ${1:Entity}CreateSuccess implements Action {\r",
            "  readonly type = ${1:Entity}ActionTypes.CreateSuccess;\r",
            "  payload: { ${2:parameterName}: ${5:I${1:Entity}Db} };\r",
            "  constructor(public ${2:parameterName}: ${5:I${1:Entity}Db}) {\r",
            "    this.payload = { ${2:parameterName} };\r",
            "  }\r",
            "}\r",
            "export class ${1:Entity}CreateError implements Action {\r",
            "  readonly type = ${1:Entity}ActionTypes.CreateError;\r",
            "  payload: { ${2:parameterName}: ${3:I${1:Entity}Create} };\r",
            "  constructor(public ${2:${1:Entity}}: ${3:I${1:Entity}Create}) {\r",
            "    this.payload = { ${2:parameterName} };\r",
            "  }\r",
            "}\r",
            "\r",
            "// UPDATE\r",
            "export class ${1:Entity}Update implements Action {\r",
            "  readonly type = ${1:Entity}ActionTypes.Update;\r",
            "  payload: { ${2:parameterName}: ${4:I${1:Entity}Edit} };\r",
            "  constructor(public ${2:parameterName}: ${4:I${1:Entity}Edit}) {\r",
            "    this.payload = { ${2:parameterName} };\r",
            "  }\r",
            "}\r",
            "export class ${1:Entity}UpdateSuccess implements Action {\r",
            "  readonly type = ${1:Entity}ActionTypes.UpdateSuccess;\r",
            "  payload: { ${2:parameterName}: ${5:I${1:Entity}Db} };\r",
            "  constructor(public ${2:parameterName}: ${5:I${1:Entity}Db}) {\r",
            "    this.payload = { ${2:parameterName} };\r",
            "  }\r",
            "}\r",
            "export class ${1:Entity}UpdateError implements Action {\r",
            "  readonly type = ${1:Entity}ActionTypes.UpdateError;\r",
            "  payload: { ${2:parameterName}: ${5:I${1:Entity}StoreEntity} };\r",
            "  constructor(public ${2:parameterName}: ${5:I${1:Entity}StoreEntity}) {\r",
            "    this.payload = { ${2:parameterName} };\r",
            "  }\r",
            "}\r",
            "\r",
            "// DELETE\r",
            "export class ${1:Entity}Delete implements Action {\r",
            "  readonly type = ${1:Entity}ActionTypes.Delete;\r",
            "  payload: { ${2:parameterName}: ${4:I${1:Entity}StoreEntity} };\r",
            "  constructor(public ${2:parameterName}: ${4:I${1:Entity}StoreEntity}) {\r",
            "    this.payload = { ${2:parameterName} };\r",
            "  }\r",
            "}\r",
            "export class ${1:Entity}DeleteSuccess implements Action {\r",
            "  readonly type = ${1:Entity}ActionTypes.DeleteSuccess;\r",
            "  payload: { ${2:parameterName}: ${4:I${1:Entity}StoreEntity} };\r",
            "  constructor(public ${2:parameterName}: ${4:I${1:Entity}StoreEntity}) {\r",
            "    this.payload = { ${2:parameterName} };\r",
            "  }\r",
            "}\r",
            "export class ${1:Entity}DeleteError implements Action {\r",
            "  readonly type = ${1:Entity}ActionTypes.DeleteError;\r",
            "  payload: { ${2:parameterName}: ${4:I${1:Entity}StoreEntity} };\r",
            "  constructor(public ${2:parameterName}: ${4:I${1:Entity}StoreEntity}) {\r",
            "    this.payload = { ${2:parameterName} };\r",
            "  }\r",
            "}\r",
            "\r",
            "// LOAD\r",
            "export class ${1:Entity}Load implements Action {\r",
            "  readonly type = ${1:Entity}ActionTypes.Load;\r",
            "  payload: { ${2:parameterName}Id: number };\r",
            "  constructor(public ${2:parameterName}Id: number) {\r",
            "    this.payload = { ${2:parameterName}Id };\r",
            "  }\r",
            "}\r",
            "export class ${1:Entity}LoadSuccess implements Action {\r",
            "  readonly type = ${1:Entity}ActionTypes.LoadSuccess;\r",
            "  payload: { ${2:parameterName}: ${5:I${1:Entity}Db} };\r",
            "  constructor(public ${2:parameterName}: ${5:I${1:Entity}Db}) {\r",
            "    this.payload = { ${2:parameterName} };\r",
            "  }\r",
            "}\r",
            "export class ${1:Entity}LoadError implements Action {\r",
            "  readonly type = ${1:Entity}ActionTypes.LoadError;\r",
            "  payload: { ${2:parameterName}: ${5:I${1:Entity}Db} };\r",
            "  constructor() {\r",
            "    this.payload = { ${2:parameterName}: undefined };\r",
            "  }\r",
            "}\r",
            "export class ${1:Entity}LoadCancel implements Action {\r",
            "  readonly type = ${1:Entity}ActionTypes.LoadCancel;\r",
            "  payload: { ${2:parameterName}: ${5:I${1:Entity}Db} };\r",
            "  constructor() {\r",
            "    this.payload = { ${2:parameterName}: undefined };\r",
            "  }\r",
            "}\r",
            "\r",
            "// LIST LOAD\r",
            "export class ${1:Entity}ListLoad implements Action {\r",
            "  readonly type = ${1:Entity}ActionTypes.ListLoad;\r",
            "  constructor() { }\r",
            "}\r",
            "export class ${1:Entity}ListLoadSuccess implements Action {\r",
            "  readonly type = ${1:Entity}ActionTypes.ListLoadSuccess;\r",
            "  payload: { list: Array<I${1:Entity}SelectListItem> };\r",
            "  constructor(public list: Array<I${1:Entity}SelectListItem>) {\r",
            "    this.payload = { list };\r",
            "  }\r",
            "}\r",
            "export class ${1:Entity}ListLoadError implements Action {\r",
            "  readonly type = ${1:Entity}ActionTypes.ListLoadError;\r",
            "  payload: { list: Array<I${1:Entity}SelectListItem> };\r",
            "  constructor() {\r",
            "    this.payload = { list: [] };\r",
            "  }\r",
            "}\r",
            "export class ${1:Entity}ListLoadCancel implements Action {\r",
            "  readonly type = ${1:Entity}ActionTypes.ListLoadCancel;\r",
            "  payload: { list: Array<I${1:Entity}SelectListItem> };\r",
            "  constructor() {\r",
            "    this.payload = { list: [] };\r",
            "  }\r",
            "}\r",
            "\r",
            "export type ${1:Entity}Actions =\r",
            "  | ${1:Entity}Create\r",
            "  | ${1:Entity}CreateSuccess\r",
            "  | ${1:Entity}CreateError\r",
            "  | ${1:Entity}Update\r",
            "  | ${1:Entity}UpdateSuccess\r",
            "  | ${1:Entity}UpdateError\r",
            "  | ${1:Entity}Delete\r",
            "  | ${1:Entity}Load\r",
            "  | ${1:Entity}LoadSuccess\r",
            "  | ${1:Entity}LoadError\r",
            "  | ${1:Entity}LoadCancel\r",
            "  | ${1:Entity}ListLoad\r",
            "  | ${1:Entity}ListLoadSuccess\r",
            "  | ${1:Entity}ListLoadError\r",
            "  | ${1:Entity}ListLoadCancel;\r",
            "  \r",
            "$0"
        ],
        "description": "List of common Actions of a CRUD Entity"
    },
    "NGRX Common Selectors": {
        "prefix": "ngrx-crud-selectors",
        "body": [
            "import { createSelector } from '@ngrx/store';\r",
            "import * as fromObjectUtils from '../utils/object.utils';\r",
            "\r",
            "export const select${1:Entity}State = (state: AppState): I${1:Entity}State =>\r",
            "  state.${2:entityState};\r",
            "\r",
            "// Entities\r",
            "export const ${3:entity}Entities = createSelector(\r",
            "  select${1:Entity}State,\r",
            "  state => state.entities\r",
            ");\r",
            "\r",
            "// List in array\r",
            "export const ${3:entity}List = createSelector(\r",
            "  ${3:entity}Entities,\r",
            "  entities => fromObjectUtils.toArray(entities)\r",
            ");\r",
            "\r",
            "// Fetch\r",
            "export const ${3:entity}IsFetching = createSelector(\r",
            "  select${1:Entity}State,\r",
            "  state => state.isFetching\r",
            ");\r",
            "\r",
            "// Create\r",
            "export const ${3:entity}CreateModel = createSelector(\r",
            "  select${1:Entity}State,\r",
            "  state => state.createModel\r",
            ");\r",
            "export const ${3:entity}CreateModelIsLoading = createSelector(\r",
            "  ${3:entity}CreateModel,\r",
            "  create => create.isLoading\r",
            ");\r",
            "  \r",
            "// Edit\r",
            "export const ${3:entity}EditModel = createSelector(\r",
            "  select${1:Entity}State,\r",
            "  state => state.editModel\r",
            ");\r",
            "export const ${3:entity}EditModelIsLoading = createSelector(\r",
            "  ${3:entity}EditModel,\r",
            "  edit => (edit && edit.isLoading ? true : false)\r",
            ");\r",
            "  \r",
            "// GetById\r",
            "export const ${3:entity}ById = (${3:entity}Id: number) =>\r",
            "  createSelector(\r",
            "    ${3:entity}Entities,\r",
            "    entities => entities[${3:entity}Id]\r",
            ");\r",
            "\r",
            "$0"
        ],
        "description": "List of common selectors of a CRUD Entity"
    },
    "NGRX Common Reducers": {
        "prefix": "ngrx-crud-reducers",
        "body": [
            "import { adapter } from './${2:entity}.adapter';\r",
            "import { I${1:Entity}State } from './${2:entity}.state';\r",
            "import { ${1:Entity}Actions, ${1:Entity}ActionTypes } from './${2:entity}.actions';\r",
            "\r",
            "const initial${1:Entity}State: I${1:Entity}State = {\r",
            "  entities: {},\r",
            "  ids: [],\r",
            "  isFetching: false,\r",
            "  createModel: undefined,\r",
            "  editModel: undefined\r",
            "};\r",
            "\r",
            "export function ${2:entity}Reducer(\r",
            "  state: I${1:Entity}State = initial${1:Entity}State,\r",
            "  action: ${1:Entity}Actions\r",
            "): I${1:Entity}State {\r",
            "  switch (action.type) {\r",
            "    // CREATE\r",
            "    case ${1:Entity}ActionTypes.Create:\r",
            "      const createModel = { ...action.payload.${3:entityParam} };\r",
            "      return {\r",
            "        ...state,\r",
            "        createModel: { ...createModel, isLoading: true }\r",
            "      };\r",
            "    // CREATE SUCCESS\r",
            "    case ${1:Entity}ActionTypes.CreateSuccess:\r",
            "      const createdModel = { ...action.payload.${3:entityParam} };\r",
            "      return adapter.addOne(createdModel, {\r",
            "        ...state,\r",
            "        createModel: { isDone: true }\r",
            "      });\r",
            "    // CREATE ERROR\r",
            "    case ${1:Entity}ActionTypes.CreateError:\r",
            "      return {\r",
            "        ...state,\r",
            "        createModel: { ...state.createModel, isLoading: false, hasError: true }\r",
            "      };\r",
            "    // UPDATE\r",
            "    case ${1:Entity}ActionTypes.Update:\r",
            "      const editModel = { ...action.payload.${3:entityParam} };\r",
            "      return {\r",
            "        ...state,\r",
            "        editModel: { ...editModel, isLoading: true }\r",
            "      };\r",
            "\r",
            "    // UPDATE SUCCESS\r",
            "    case ${1:Entity}ActionTypes.UpdateSuccess:\r",
            "      const editedModel = { ...action.payload.${3:entityParam} };\r",
            "      return adapter.upsertOne(\r",
            "        editedModel,\r",
            "        {\r",
            "          ...state,\r",
            "          editModel: { ...editedModel, isLoading: false }\r",
            "        }\r",
            "      );\r",
            "    // UPDATE ERROR\r",
            "    case ${1:Entity}ActionTypes.UpdateError:\r",
            "      return {\r",
            "        ...state,\r",
            "        editModel: { ...state.editModel, isLoading: false }\r",
            "      };\r",
            "    // LOAD\r",
            "    case ${1:Entity}ActionTypes.Load:\r",
            "      return {\r",
            "        ...state,\r",
            "        isFetching: true,\r",
            "        createModel: undefined,\r",
            "        editModel: { isLoading: true }\r",
            "      };\r",
            "    // LOAD CANCEL\r",
            "    case ${1:Entity}ActionTypes.LoadCancel:\r",
            "      return {\r",
            "        ...state,\r",
            "        isFetching: false,\r",
            "        editModel: undefined,\r",
            "        createModel: undefined\r",
            "      };\r",
            "    // LOAD SUCCESS\r",
            "    case ${1:Entity}ActionTypes.LoadSuccess:\r",
            "      const loadedModel = { ...action.payload.${3:entityParam} };\r",
            "      return adapter.upsertOne(loadedModel, {\r",
            "        ...state,\r",
            "        isFetching: false,\r",
            "        editModel: { ...loadedModel, isLoading: false }\r",
            "      });\r",
            "    // LOAD ERROR\r",
            "    case ${1:Entity}ActionTypes.LoadError:\r",
            "      return {\r",
            "        ...state,\r",
            "        isFetching: false,\r",
            "        editModel: { ...editModel, isLoading: false }\r",
            "      };\r",
            "\r",
            "    // LIST LOAD\r",
            "    case ${1:Entity}ActionTypes.ListLoad:\r",
            "      return {\r",
            "        ...state,\r",
            "        isFetching: true\r",
            "      };\r",
            "    // LIST LOAD SUCCESS / ERROR\r",
            "    case ${1:Entity}ActionTypes.ListLoadSuccess:\r",
            "    case ${1:Entity}ActionTypes.ListLoadError:\r",
            "      const { list } = action.payload;\r",
            "      return adapter.upsertMany(list, {\r",
            "        ...state,\r",
            "        isFetching: false,\r",
            "        createModel: undefined,\r",
            "        editModel: undefined\r",
            "      });\r",
            "    // LIST LOAD CANCEL\r",
            "    case ${1:Entity}ActionTypes.ListLoadCancel:\r",
            "      return {\r",
            "        ...state,\r",
            "        isFetching: false\r",
            "      };\r",
            "\r",
            "    default:\r",
            "      return state;\r",
            "  }\r",
            "}\r",
            ""
        ],
        "description": "List of common reducers of a CRUD Entity"
    }
}